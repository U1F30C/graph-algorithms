import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import GraphUI from "react-graph-vis";
import { Graph } from "../lib/graph";
import { useState } from "react";

interface GraphUIINfo {
  nodes: { id: string | number; label: string; title: string }[];
  edges: { from: string | number; to: string | number }[];
}

function generateRandomGraphDescriptor() {
  const vertices = Array.from(Array(10)).map((_, i) => (i + 1).toString());
  let descriptor: [string, string, number][] = [];
  for (let i = 0; i < vertices.length; i++)
    for (let j = i + 1; j < vertices.length; j++) {
      const origin = vertices[i];
      const destination = vertices[j];
      descriptor.push([origin, destination, Math.ceil(Math.random() * 100)]);
    }
  return descriptor;
}

const Home: NextPage = () => {
  let [graphKey, setGraphKey] = useState("ASDFGHJKL");

  const graph = new Graph();
  const data: [string, string, number][] = [
    ["A", "B", 7],
    ["A", "D", 5],
    ["B", "C", 8],
    ["B", "E", 7],
    ["C", "E", 5],
    ["D", "E", 15],
    ["D", "F", 6],
    ["E", "F", 3],
    ["E", "G", 9],
    ["F", "G", 11],
  ];
  let tsData: [string, string, number][] = [
    ["1", "2", 4],
    ["1", "3", 1],
    ["1", "4", 3],
    ["2", "3", 2],
    ["2", "4", 1],
    ["3", "4", 5],
  ];
  tsData = generateRandomGraphDescriptor();
  tsData.forEach(([source, destination, weight]) => {
    graph.addEdge(source, destination, weight);
  });
  // const shortestPath = graph.dijkstra("B", "G");
  // const minimumSpanningTreeEdges = graph.kruskal();
  const travellingSalesmanPath = graph.travellingSalesman("1");

  const graphUIInfo: GraphUIINfo = {
    nodes: graph
      .getVertices()
      .map((key) => ({ id: key, label: key, title: key })),
    edges: graph.getEdges().map((edge) => ({
      from: edge.source,
      to: edge.destination,
      label: edge.weight.toString(),
      color: travellingSalesmanPath.some((treeEdge) => {
        return (
          (treeEdge.destination == edge.destination &&
            treeEdge.source == edge.source) ||
          (treeEdge.destination == edge.source &&
            treeEdge.source == edge.destination)
        );
      })
        ? "green"
        : "black",
      arrows: "to, from",
    })),
  };

  const options = {
    layout: {
      hierarchical: false,
    },
    edges: {
      color: "#000000",
    },
    height: "500px",
  };

  const events = {
    select: function (event: any) {
      var { nodes, edges } = event;
    },
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <div className={styles.grid}>
          <div className={styles.card}>
            <h2>Grafo &rarr;</h2>
            <GraphUI
              graph={graphUIInfo}
              options={options}
              key={graphKey}
              // events={events}
              // getNetwork={(network) => {
              //   //  if you want access to vis.js network api you can set the state in a parent component using this property
              // }}
            />
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
